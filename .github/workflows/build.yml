name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build for'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - windows
        - macos
        - linux

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
          - os: macos-latest
            platform: macos
            arch: arm64
          - os: ubuntu-latest
            platform: linux
            arch: x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: npm ci

    - name: Install dependencies (Unix)
      if: matrix.platform != 'windows'
      run: npm ci

    - name: Clear caches and verify configuration (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        Write-Host "Clearing any potential caches..."
        if (Test-Path "node_modules\.cache") { Remove-Item -Recurse -Force "node_modules\.cache" }
        if (Test-Path ".electron-builder") { Remove-Item -Recurse -Force ".electron-builder" }
        Write-Host "Verifying package.json configuration..."
        $pkg = Get-Content "package.json" | ConvertFrom-Json
        $invalidProps = $pkg.build.PSObject.Properties.Name | Where-Object { $_ -like "mac-*" }
        if ($invalidProps) {
          Write-Error "Invalid properties found: $($invalidProps -join ', ')"
          exit 1
        }
        Write-Host "✅ No invalid properties found in package.json"

    - name: Clear caches and verify configuration (Unix)
      if: matrix.platform != 'windows'
      run: |
        echo "Clearing any potential caches..."
        rm -rf node_modules/.cache || true
        rm -rf .electron-builder || true
        echo "Verifying package.json configuration..."
        node -e "
          const pkg = JSON.parse(require('fs').readFileSync('package.json', 'utf8'));
          const invalidProps = Object.keys(pkg.build || {}).filter(key => key.startsWith('mac-'));
          if (invalidProps.length > 0) {
            console.error('Invalid properties found:', invalidProps);
            process.exit(1);
          }
          console.log('✅ No invalid properties found in package.json');
        "

    - name: Setup icons for build (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        if (-not (Test-Path "assets/icon.ico")) {
          Write-Host "Creating placeholder Windows icon..."
          Copy-Item "assets/icon.png" "assets/icon.ico"
        }

    - name: Setup icons for build (macOS)
      if: matrix.platform == 'macos'
      run: |
        if [ ! -f "assets/icon.icns" ]; then
          echo "Creating placeholder macOS icon..."
          mkdir -p assets/icon.iconset
          sips -z 16 16 assets/icon.png --out assets/icon.iconset/icon_16x16.png
          sips -z 32 32 assets/icon.png --out assets/icon.iconset/icon_16x16@2x.png
          sips -z 32 32 assets/icon.png --out assets/icon.iconset/icon_32x32.png
          sips -z 64 64 assets/icon.png --out assets/icon.iconset/icon_32x32@2x.png
          sips -z 128 128 assets/icon.png --out assets/icon.iconset/icon_128x128.png
          sips -z 256 256 assets/icon.png --out assets/icon.iconset/icon_128x128@2x.png
          sips -z 256 256 assets/icon.png --out assets/icon.iconset/icon_256x256.png
          sips -z 512 512 assets/icon.png --out assets/icon.iconset/icon_256x256@2x.png
          sips -z 512 512 assets/icon.png --out assets/icon.iconset/icon_512x512.png
          sips -z 1024 1024 assets/icon.png --out assets/icon.iconset/icon_512x512@2x.png
          iconutil -c icns assets/icon.iconset -o assets/icon.icns
        fi

    - name: Setup icons for build (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "Linux build - using PNG icon directly"

    - name: Build application (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        Write-Host "Building for Windows..."
        Write-Host "Current directory: $(Get-Location)"
        Write-Host "Node version: $(node --version)"
        Write-Host "NPM version: $(npm --version)"
        Write-Host "Running: npm run build:win"
        npm run build:win
        Write-Host "Build completed successfully!"

    - name: Build application (macOS)
      if: matrix.platform == 'macos'
      run: |
        echo "Building for macOS..."
        echo "Current directory: $(pwd)"
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Running: npm run build:mac"
        npm run build:mac
        echo "Build completed successfully!"

    - name: Build application (Linux)
      if: matrix.platform == 'linux'
      run: |
        echo "Building for Linux..."
        echo "Current directory: $(pwd)"
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Running: npm run build:linux"
        npm run build:linux
        echo "Build completed successfully!"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-${{ matrix.arch }}
        path: dist/
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*/dist/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-single-windows:
    if: github.event.inputs.platform == 'windows'
    runs-on: windows-latest
    timeout-minutes: 60
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        shell: pwsh
        run: npm ci
      - name: Setup icons for build (Windows)
        shell: pwsh
        run: |
          if (-not (Test-Path "assets/icon.ico")) {
            Write-Host "Creating placeholder Windows icon..."
            Copy-Item "assets/icon.png" "assets/icon.ico"
          }
      - name: Build application (Windows)
        shell: pwsh
        run: |
          Write-Host "Building for Windows..."
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Node version: $(node --version)"
          Write-Host "NPM version: $(npm --version)"
          Write-Host "Running: npm run build:win"
          npm run build:win
          Write-Host "Build completed successfully!"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/
          retention-days: 30

  build-single-macos:
    if: github.event.inputs.platform == 'macos'
    runs-on: macos-latest
    timeout-minutes: 60
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Setup icons for build (macOS)
        run: |
          if [ ! -f "assets/icon.png" ]; then
            echo "Missing icon.png!"
            exit 1
          fi
      - name: Build application (macOS)
        run: |
          echo "Building for macOS..."
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Running: npm run build:mac"
          npm run build:mac
          echo "Build completed successfully!"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: dist/
          retention-days: 30

  build-single-linux:
    if: github.event.inputs.platform == 'linux'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Setup Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: Build application (Linux)
        run: |
          echo "Building for Linux..."
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Running: npm run build:linux"
          npm run build:linux
          echo "Build completed successfully!"
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/
          retention-days: 30 